#Code By @NoobZen on telegram
from pyrogram import Client, filters,enums,idle
from pyrogram.errors import ApiIdInvalid, ApiIdPublishedFlood, AccessTokenInvalid
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.enums import ChatAction, ParseMode
import openai
from pyrogram.types import CallbackQuery
from config import *
import os,sys,re,requests
import asyncio,time
from random import choice

from datetime import datetime
import logging

FORMAT = "[XOTIC] %(message)s"
logging.basicConfig(
    level=logging.WARNING, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


StartTime = time.time()
GPT = Client(
    "chat-gpt" ,
    api_id = API_ID,
    api_hash = API_HASH ,
    bot_token = BOT_TOKEN
)
START = f"""
 ú·¥á ü ü·¥è, …™·¥õs {BOT_NAME}
   
‚úá ·¥Ä ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü ·¥Ä…™  ô·¥Äs·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ  ô·¥è·¥õ.
‚úá “ì·¥è Ä  ú·¥á ü·¥ò ·¥õ è·¥ò·¥á /help

·¥ús·¥Ä…¢·¥á : /ask where is hampi
"""
aditya = ("https://github.com/PyAaditya/GPT-BOT")
owner = ("NoobZen")
xotic = ("ZenBotX")
SOURCE = aditya
UPDATE_CHNL = xotic
DEVELOPER = owner
SOURCE_TEXT = f"""
‚úá ·¥õ ú…™s …™s ·¥õ ú·¥á s·¥è·¥ú Ä·¥Ñ·¥á ·¥è“ì [{BOT_NAME}]

**·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è  Ä·¥á·¥Ö…™ Ä·¥á·¥Ñ·¥õ ·¥õ·¥è  Ä·¥á·¥ò·¥è**
"""


x=["‚ù§Ô∏è","üéâ","‚ú®","ü™∏","üéâ","üéà","üéØ"]
g=choice(x)
MAIN = [
    [
        InlineKeyboardButton(text="·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url=f"https://t.me/{DEVELOPER}"),
        InlineKeyboardButton(text=" Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ", url=f"https://t.me/{SUPPORT_GRP}"),
    ],
    [
        InlineKeyboardButton(
            text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è ·¥ú Ä ·¥Ñ ú·¥Ä·¥õ",
            url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
        ),
    ],
    [
        InlineKeyboardButton(text=" ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="HELP"),
    ],
    [
        InlineKeyboardButton(text="s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á", url=f"https://github.com/PyAaditya/GPT-BOT"),
        InlineKeyboardButton(text=" ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ", url=f"https://t.me/{UPDATE_CHNL}"),
    ],
]
X = [
    [
        InlineKeyboardButton(text="·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url=f"https://t.me/{DEVELOPER}"),
        
        InlineKeyboardButton(text=" Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ", url=f"https://t.me/{SUPPORT_GRP}"),
    ]
    ]
    
PNG_BTN = [
    [
         InlineKeyboardButton(
             text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è ·¥ú Ä ·¥Ñ ú·¥Ä·¥õ",
             url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
         ),
     ],
     [
         InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", 
                              url=f"https://t.me/{SUPPORT_GRP}"), 
         InlineKeyboardButton(text=" ú·¥á ü·¥ò", 
                              url=f"https://t.me/{BOT_USERNAME}?start=help",
         ),
     ],
]
SOURCE_BUTTONS = InlineKeyboardMarkup([[InlineKeyboardButton('s·¥è·¥ú Ä·¥Ñ·¥á', url=f"{SOURCE}")]])
HELP_READ = "‚úò ·¥ús·¥á /ask write a simple calculator code in python.  \n\n **‚úò ·¥ús·¥á /ping ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥ò…™…¥…¢.**"
HELP_BACK = [
     [
#           InlineKeyboardButton(text="Q·¥ú·¥áÍú±·¥õ…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ ·¥Ñ·¥Ä…¥ Íú±·¥è ü·¥†·¥á", url=f"https://t.me/CodersW0rld/633"),
           
     ],
    [
           InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã ", callback_data="HELP_BACK"),
    ],
]

  
#         start
@GPT.on_message(filters.command(["tstart",f"tstart@{BOT_USERNAME}"]))
async def restart(client, m: Message):
        accha = await m.reply_text(
                        text = f"{g}")
        await asyncio.sleep(0.2)
        await accha.edit("·¥ò…™…¥…¢ ·¥ò·¥è…¥…¢ Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢..")
        await asyncio.sleep(0.2)
        await accha.delete()
        umm = await m.reply_sticker(
                  sticker = STKR,
        )
        await asyncio.sleep(0.3)
        await umm.delete()
        await m.reply_photo(
            photo = START_IMG,
            caption=START,
            reply_markup=InlineKeyboardMarkup(MAIN),
        )
#  callback 
@GPT.on_callback_query()
async def cb_handler(Client, query: CallbackQuery):
    if query.data == "HELP":
     await query.message.edit_text(
                      text = HELP_READ,
                      reply_markup = InlineKeyboardMarkup(HELP_BACK),
     )
    elif query.data == "HELP_BACK":
            await query.message.edit(text = START,
                  reply_markup=InlineKeyboardMarkup(MAIN),
        )
    
@GPT.on_message(filters.command(["help", f"help@{BOT_USERNAME}"], prefixes=["","+", ".", "/", "-", "?", "$"]))
async def restart(client, message):
    hmm = await message.reply_photo(START_IMG,
                        caption = HELP_READ,
                        reply_markup= InlineKeyboardMarkup(HELP_BACK),
       )
@GPT.on_message(filters.command(['source', 'repo'], prefixes=["","+", ".", "/", "-", "?", "$"]))
async def source(bot, m):
    
    await m.reply_photo(START_IMG, caption=SOURCE_TEXT, reply_markup=SOURCE_BUTTONS)
#  alive
@GPT.on_message(filters.command(["ping","alive", "start", f"start@{BOT_USERNAME}"], prefixes=["+", "/", "-", "?", "$", "&","."]))
async def ping(client, message: Message):
        start = datetime.now()
        t = "‚ÑìœÉŒ±‚àÇŒπŒ∑g..."
        txxt = await message.reply(t)
        await asyncio.sleep(0.25)
        await txxt.edit_text("œÅŒπ–∏gŒπ–∏g.....")
        await asyncio.sleep(0.35)
        await txxt.delete()
        end = datetime.now()
        ms = (end-start).microseconds / 1000
        await message.reply_photo(
                             photo=START_IMG,
                             caption=f" ú·¥á è !!\n**[·¥Ñ ú·¥ß·¥õ Í≠ô …¢·¥ò·¥õ](t.me/{BOT_USERNAME}) …™Íú± s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥Ä…¥·¥Ö …™·¥õ's ·¥Ä ü…™·¥†·¥á. \n\n‚û• ·¥ò…™…¥…¢ ·¥è“ì ·¥õ ú…™s  ô·¥è·¥õ …™s : `{ms}` ms\n\n‚òâÔ∏é ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥Ä ô·¥è·¥ú·¥õ ·¥ç è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö s·¥á…¥·¥Ö /help .\n\n**·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù£  ô è || [·¥¢·¥á…¥](https://t.me/NoobZen)||",
                             reply_markup=InlineKeyboardMarkup(PNG_BTN),
       )

#  main   
openai.api_key = OPENAI_KEY
@GPT.on_message(filters.command(["ask","ai","chatgpt"],  prefixes=["","+", ".", "/", "-", "?", "$","#","&"]))
async def chat(bot, message):
    
    try:
        start_time = time.time()
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        if len(message.command) < 2:
            await message.reply_text(
            "Example:**\n\n`/ask Main Shlok of Bhagwat gita`")
        else:

            a = message.text.split(' ', 1)[1]
            MODEL = "gpt-3.5-turbo"
            resp = openai.ChatCompletion.create(model=MODEL,messages=[{"role": "user", "content": a}],
    temperature=0.2,
)

            x=resp['choices'][0]["message"]["content"]
            end_time = time.time()
            telegram_ping = str(round((end_time - start_time) * 1000, 3)) + " ·¥çs"
            await message.reply_text(f"·¥õ ú·¥á «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥°·¥Äs:\n {a} \n\n {BOT_NAME} ·¥Ä…¥Íú±·¥°·¥á Ä·¥á·¥Ö:-\n\n {x}\n\n·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥  {telegram_ping} \n\n‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è @{BOT_USERNAME} ", parse_mode=ParseMode.MARKDOWN,reply_markup=InlineKeyboardMarkup(X))     
    except Exception as e:
        await message.reply_text(f"**·¥á Ä Ä·¥è Ä:    {e} ")

@GPT.on_message(filters.command(["image","photo","img","generate"],  prefixes=["","+", ".", "/", "-", "?", "$","#","&"] ))

async def chat(bot, message):

    try:



        start_time = time.time()

        await bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)

        if len(message.command) < 2:

            await message.reply_text(

            "**Example:**\n\n`/generate a white siamese cat`\n")

        else:

            a = message.text.split(' ', 1)[1]

            response= openai.Image.create(prompt=a ,n=1,size="1024x1024")

            image_url = response['data'][0]['url']

            end_time = time.time()

            telegram_ping = str(round((end_time - start_time) * 1000, 3)) + " ·¥çs"

            await message.reply_photo(image_url,caption=f"‚ú®·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥ {telegram_ping} ",parse_mode=ParseMode.DISABLED,reply_markup=InlineKeyboardMarkup(X)) 

    except Exception as e:

            await message.reply_text(f"**·¥á Ä Ä·¥è Ä: **  ` {e} `")

    

    
adi = ("https://github.com/PyAaditya/GPT-BOT")
adi2 = ("NoobZen")
adi3= ("ZenBotX")
if SOURCE != adi:
    print("sed, you have changed source it back to ` https://github.com/PyAaditya/GPT-BOT `  else I won't work")
    sys.exit(1)  
if DEVELOPER!=adi2:
    print("sed, you have changed Dev, change it back to `NoobZen` else I won't work")
    sys.exit(1)
if UPDATE_CHNL!=adi3:
    print("sed, you have change Updates, change it back to `ZenBotX` else I won't work")
    sys.exit(1)


if __name__ == "__main__":
    print(f""" {BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á!
    """)
    try:
        GPT.start()
        
        
    except (ApiIdInvalid, ApiIdPublishedFlood):
        raise Exception("Your API_ID/API_HASH is not valid.")
    except AccessTokenInvalid:
        raise Exception("Your BOT_TOKEN is not valid.")
    print(f"""JOIN  @ZenbotX
GIVE STAR TO THE REPO 
 {BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á!  
    """)
    idle()
    GPT.stop()
    print("Bot stopped. Bye !")

 
